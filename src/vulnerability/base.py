"""
Base class for vulnerability scanners
"""

from abc import ABC, abstractmethod
from typing import List, Optional, Dict, Any
import logging

from ..api.models import Component
from .models import Vulnerability, ComponentVulnerabilities

logger = logging.getLogger(__name__)

class BaseVulnerabilityScanner(ABC):
    """Abstract base class for vulnerability scanners"""
    
    def __init__(self):
        self.cache: Dict[str, ComponentVulnerabilities] = {}
        
    @abstractmethod
    async def scan_component(self, component: Component) -> List[Vulnerability]:
        """Scan a single component for vulnerabilities"""
        pass
    
    @abstractmethod
    async def scan_components(self, components: List[Component]) -> List[ComponentVulnerabilities]:
        """Scan multiple components for vulnerabilities"""
        pass
    
    def _get_cache_key(self, component: Component) -> str:
        """Generate cache key for component"""
        if component.purl:
            return component.purl
        return f"{component.name}@{component.version or 'unknown'}"
    
    def _is_cached(self, component: Component) -> bool:
        """Check if component vulnerabilities are cached"""
        return self._get_cache_key(component) in self.cache
    
    def _get_cached(self, component: Component) -> Optional[ComponentVulnerabilities]:
        """Get cached vulnerabilities for component"""
        return self.cache.get(self._get_cache_key(component))
    
    def _cache_result(self, component: Component, vulnerabilities: List[Vulnerability]):
        """Cache vulnerability scan results"""
        key = self._get_cache_key(component)
        self.cache[key] = ComponentVulnerabilities(
            component_name=component.name,
            component_version=component.version,
            purl=component.purl,
            vulnerabilities=vulnerabilities
        )
# ¬© NATO Airborne Early Warning and Control Force - Licensed under NFCL v1.0
"""
Vulnerability Details UI component for displaying enhanced CVE information
"""

def get_vulnerability_details_ui() -> str:
    """Generate the vulnerability details UI HTML"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Perseus - Vulnerability Details</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f5f5f5;
            }
            .nav-bar {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                background: #2c3e50;
                padding: 10px 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                z-index: 1000;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            .nav-back-button {
                background: white;
                color: #2c3e50;
                padding: 8px 16px;
                border-radius: 5px;
                text-decoration: none;
                font-weight: bold;
                transition: all 0.3s;
                border: none;
                cursor: pointer;
            }
            .nav-back-button:hover {
                background: #3498db;
                color: white;
                transform: translateX(-5px);
            }
            .nav-title {
                color: white;
                font-size: 18px;
                font-weight: bold;
            }
            .container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 80px 20px 20px 20px;
            }
            .header {
                background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
                color: white;
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 30px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                position: relative;
                z-index: 10;
            }
            .back-button {
                position: absolute;
                top: 20px;
                right: 20px;
                background: rgba(255, 255, 255, 0.9);
                border: 2px solid #2c3e50;
                color: #2c3e50;
                padding: 10px 20px;
                border-radius: 5px;
                text-decoration: none;
                font-weight: bold;
                transition: all 0.3s;
                z-index: 100;
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }
            .back-button:hover {
                background: #2c3e50;
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            }
            .search-section {
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-bottom: 30px;
            }
            .vulnerability-card {
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                margin-bottom: 20px;
                transition: transform 0.2s;
            }
            .vulnerability-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            }
            .severity-badge {
                display: inline-block;
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 14px;
                font-weight: bold;
                text-transform: uppercase;
                margin-right: 10px;
            }
            .severity-critical { background: #e74c3c; color: white; }
            .severity-high { background: #e67e22; color: white; }
            .severity-medium { background: #f39c12; color: white; }
            .severity-low { background: #3498db; color: white; }
            .severity-unknown { background: #95a5a6; color: white; }
            .cvss-details {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
                border-left: 4px solid #3498db;
            }
            .cvss-metric {
                display: inline-block;
                margin: 5px 10px 5px 0;
                padding: 5px 10px;
                background: white;
                border-radius: 5px;
                border: 1px solid #ddd;
                font-size: 14px;
            }
            .cvss-metric-label {
                font-weight: bold;
                color: #34495e;
            }
            .references-section {
                margin-top: 20px;
            }
            .reference-link {
                display: inline-block;
                margin: 5px 10px 5px 0;
                padding: 8px 15px;
                background: #3498db;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background 0.3s;
            }
            .reference-link:hover {
                background: #2980b9;
            }
            .advisory-card {
                background: #fff3cd;
                padding: 10px;
                border-radius: 5px;
                margin: 10px 0;
                border-left: 4px solid #ffc107;
            }
            .patch-info {
                background: #d4edda;
                padding: 10px;
                border-radius: 5px;
                margin: 10px 0;
                border-left: 4px solid #28a745;
            }
            .exploit-warning {
                background: #f8d7da;
                padding: 10px;
                border-radius: 5px;
                margin: 10px 0;
                border-left: 4px solid #dc3545;
            }
            .loading {
                text-align: center;
                color: #666;
                padding: 40px;
            }
            .error {
                background: #f8d7da;
                color: #721c24;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
            }
            .detail-section {
                margin: 20px 0;
                padding: 15px;
                background: #f8f9fa;
                border-radius: 8px;
            }
            .detail-section h3 {
                margin-top: 0;
                color: #2c3e50;
            }
            input, select, button {
                padding: 10px;
                margin: 5px;
                border-radius: 5px;
                border: 1px solid #ddd;
                font-size: 16px;
            }
            button {
                background: #3498db;
                color: white;
                cursor: pointer;
                transition: background 0.3s;
            }
            button:hover {
                background: #2980b9;
            }
            .filter-section {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                align-items: center;
            }
            .no-results {
                text-align: center;
                padding: 40px;
                color: #666;
            }
            .pagination {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 10px;
                margin: 20px 0;
                padding: 20px;
                background: white;
                border-radius: 10px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .pagination button {
                padding: 8px 16px;
                margin: 0;
                font-size: 14px;
            }
            .pagination button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
            .pagination .page-info {
                margin: 0 15px;
                font-weight: bold;
            }
        </style>
    </head>
    <body>
        <div class="nav-bar">
            <a href="/dashboard" class="nav-back-button">‚Üê Back to Dashboard</a>
            <div class="nav-title">Perseus Vulnerability Details</div>
            <div style="width: 150px;"></div>
        </div>
        <div class="container">
            <div class="header">
                <h1>üõ°Ô∏è Perseus Vulnerability Details</h1>
                <p>Enhanced CVE Information and Security Analysis</p>
            </div>
            
            <div class="search-section">
                <h2>Search Vulnerabilities</h2>
                <div class="filter-section">
                    <input type="text" id="searchInput" placeholder="Search by CVE ID, component, or description..." style="flex: 1;">
                    <select id="severityFilter">
                        <option value="">All Severities</option>
                        <option value="critical">Critical</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                    </select>
                    <input type="text" id="analysisIdInput" placeholder="Analysis ID (optional)">
                    <button onclick="searchVulnerabilities(true)">Search</button>
                    <button onclick="clearFilters()">Clear</button>
                </div>
                <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #eee;">
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <button onclick="showOrphanVulnerabilities()" style="background-color: #f39c12; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
                            üîç Show Orphan Vulnerabilities
                        </button>
                        <button onclick="deleteOrphanVulnerabilities()" style="background-color: #e74c3c; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
                            üóëÔ∏è Delete All Orphans
                        </button>
                        <span id="orphanCount" style="color: #7f8c8d; font-size: 0.9em;"></span>
                    </div>
                </div>
            </div>
            
            <div id="resultsContainer">
                <div class="no-results">
                    Enter search criteria above to find vulnerabilities
                </div>
            </div>
        </div>
        
        <script>
            let currentVulnerabilities = [];
            let currentPage = 1;
            let pageSize = 50;
            
            async function searchVulnerabilities(resetPage = false) {
                if (resetPage) {
                    currentPage = 1;
                }
                
                const searchTerm = document.getElementById('searchInput').value;
                const severity = document.getElementById('severityFilter').value;
                const analysisId = document.getElementById('analysisIdInput').value;
                
                const resultsContainer = document.getElementById('resultsContainer');
                resultsContainer.innerHTML = '<div class="loading">Searching vulnerabilities...</div>';
                
                try {
                    let response;
                    let data;
                    
                    // If analysis ID is provided, use the detailed endpoint
                    if (analysisId) {
                        // Try our new detailed endpoint first
                        response = await fetch(`/api/v1/vulnerabilities/detailed/${analysisId}`);
                        if (response.ok) {
                            data = await response.json();
                        } else {
                            // Fallback to legacy endpoint
                            response = await fetch(`/vulnerabilities/scan/${analysisId}`);
                            if (response.ok) {
                                data = await response.json();
                            } else {
                                resultsContainer.innerHTML = '<div class="error">Failed to fetch vulnerabilities for analysis ID</div>';
                                return;
                            }
                        }
                        
                        // Store API response for count display
                        window.lastApiResponse = data;
                        displayVulnerabilities(data.vulnerabilities || [], searchTerm, severity);
                        return;
                    }
                    
                    // Otherwise, search all vulnerabilities using regular search endpoint
                    const params = new URLSearchParams();
                    if (searchTerm) params.append('search', searchTerm);
                    if (severity) params.append('severity', severity);
                    params.append('limit', pageSize);
                    params.append('offset', (currentPage - 1) * pageSize);
                    
                    response = await fetch(`/api/v1/vulnerabilities?${params}`);
                    if (response.ok) {
                        data = await response.json();
                        // Store API response for count display
                        window.lastApiResponse = data;
                        displayVulnerabilities(data.vulnerabilities || [], searchTerm, severity);
                    } else {
                        resultsContainer.innerHTML = '<div class="error">Failed to search vulnerabilities</div>';
                    }
                } catch (error) {
                    resultsContainer.innerHTML = `<div class="error">Error: ${error.message}</div>`;
                }
            }
            
            // Auto-fill analysis ID if provided in URL
            window.addEventListener('load', function() {
                const urlParams = new URLSearchParams(window.location.search);
                const analysisId = urlParams.get('analysis_id');
                if (analysisId) {
                    document.getElementById('analysisIdInput').value = analysisId;
                    // Auto-search when analysis ID is provided
                    searchVulnerabilities();
                }
            });
            
            function displayVulnerabilities(vulnerabilities, searchTerm, severity) {
                const resultsContainer = document.getElementById('resultsContainer');
                
                if (vulnerabilities.length === 0) {
                    resultsContainer.innerHTML = '<div class="no-results">No vulnerabilities found matching your criteria</div>';
                    return;
                }
                
                // Apply client-side filtering
                let filteredVulnerabilities = vulnerabilities.filter(vuln => {
                    // Filter by search term (CVE ID, title, description)
                    let matchesSearch = true;
                    if (searchTerm && searchTerm.trim()) {
                        const search = searchTerm.toLowerCase();
                        matchesSearch = (
                            ((vuln.id && vuln.id.toLowerCase().includes(search)) || (vuln.vulnerability_id && vuln.vulnerability_id.toLowerCase().includes(search))) ||
                            (vuln.title && vuln.title.toLowerCase().includes(search)) ||
                            (vuln.description && vuln.description.toLowerCase().includes(search))
                        );
                    }
                    
                    // Filter by severity
                    let matchesSeverity = true;
                    if (severity && severity.trim()) {
                        matchesSeverity = (vuln.severity && vuln.severity.toLowerCase() === severity.toLowerCase());
                    }
                    
                    return matchesSearch && matchesSeverity;
                });
                
                // Display filtered results
                if (filteredVulnerabilities.length === 0) {
                    resultsContainer.innerHTML = '<div class="no-results">No vulnerabilities found matching your criteria</div>';
                    return;
                }
                
                // Check if we have API response data with total counts
                let countMessage = `Found ${filteredVulnerabilities.length} vulnerabilities`;
                
                // Show filtering information if filters are applied
                const hasFilters = (searchTerm && searchTerm.trim()) || (severity && severity.trim());
                const originalCount = vulnerabilities.length;
                
                if (hasFilters && filteredVulnerabilities.length !== originalCount) {
                    countMessage = `Found ${filteredVulnerabilities.length} vulnerabilities (filtered from ${originalCount} total)`;
                    
                    // Add filter details
                    let filterDetails = [];
                    if (searchTerm && searchTerm.trim()) {
                        filterDetails.push(`search: "${searchTerm}"`);
                    }
                    if (severity && severity.trim()) {
                        filterDetails.push(`severity: ${severity}`);
                    }
                    if (filterDetails.length > 0) {
                        countMessage += ` - Filters: ${filterDetails.join(', ')}`;
                    }
                } else if (window.lastApiResponse && window.lastApiResponse.total !== undefined) {
                    const total = window.lastApiResponse.total;
                    const returned = window.lastApiResponse.returned || filteredVulnerabilities.length;
                    const limit = window.lastApiResponse.limit;
                    
                    if (total > returned) {
                        countMessage = `Found ${filteredVulnerabilities.length} vulnerabilities (showing ${returned} of ${total} total, limited by ${limit})`;
                    } else {
                        countMessage = `Found ${filteredVulnerabilities.length} of ${total} total vulnerabilities`;
                    }
                }
                
                let html = `<h2>${countMessage}</h2>`;
                
                filteredVulnerabilities.forEach(vuln => {
                    html += createVulnerabilityCard(vuln);
                });
                
                // Add pagination controls if we have API response data
                if (window.lastApiResponse && window.lastApiResponse.total !== undefined) {
                    html += createPaginationControls(window.lastApiResponse);
                }
                
                resultsContainer.innerHTML = html;
            }
            
            function createVulnerabilityCard(vuln) {
                let html = `
                    <div class="vulnerability-card">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <h3>${vuln.id || vuln.vulnerability_id || 'Unknown'}</h3>
                            <span class="severity-badge severity-${vuln.severity || 'unknown'}">${vuln.severity || 'Unknown'}</span>
                        </div>
                `;
                
                // Add orphan status indicator
                if (vuln.is_orphan === true) {
                    html += `<div class="orphan-info" style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 3px solid #f39c12;">`;
                    html += `<div><strong>‚ö†Ô∏è Orphan Vulnerability:</strong> This vulnerability has no linked components</div>`;
                    html += `<div style="margin-top: 5px; font-size: 0.9em; color: #856404;">This vulnerability was imported but is not currently associated with any analyzed components.</div>`;
                    html += `</div>`;
                } else if (vuln.component_name || vuln.analysis_id) {
                    // Add component and analysis information if available
                    html += `<div class="component-info" style="background: #f8f9fa; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 3px solid #007bff;">`;
                    if (vuln.component_name) {
                        html += `<div><strong>üì¶ Component:</strong> ${vuln.component_name}`;
                        if (vuln.component_version) {
                            html += ` (v${vuln.component_version})`;
                        }
                        html += `</div>`;
                    }
                    if (vuln.analysis_id) {
                        html += `<div style="margin-top: 5px;"><strong>üîç Analysis:</strong> <code>${vuln.analysis_id}</code></div>`;
                    }
                    
                    // Show component count if available
                    if (vuln.component_count && vuln.component_count > 0) {
                        html += `<div style="margin-top: 5px;"><strong>üîó Components affected:</strong> ${vuln.component_count}</div>`;
                    }
                    html += `</div>`;
                }
                
                if (vuln.title) {
                    html += `<h4>${vuln.title}</h4>`;
                }
                
                // Only show description if it's different from the title
                if (vuln.description && vuln.description !== vuln.title) {
                    html += `<p>${vuln.description}</p>`;
                }
                
                // CVSS Details
                if (vuln.cvss) {
                    html += `
                        <div class="cvss-details">
                            <h4>CVSS ${vuln.cvss.version || '3.1'} Score: ${vuln.cvss.base_score || 'N/A'}</h4>
                            <div>
                    `;
                    
                    if (vuln.cvss.vector_string) {
                        html += `<div style="margin-bottom: 10px; font-family: monospace;">${vuln.cvss.vector_string}</div>`;
                    }
                    
                    // Display CVSS metrics if available
                    const metrics = [
                        { label: 'Attack Vector', value: vuln.cvss.attack_vector },
                        { label: 'Attack Complexity', value: vuln.cvss.attack_complexity },
                        { label: 'Privileges Required', value: vuln.cvss.privileges_required },
                        { label: 'User Interaction', value: vuln.cvss.user_interaction },
                        { label: 'Scope', value: vuln.cvss.scope },
                        { label: 'Confidentiality', value: vuln.cvss.confidentiality_impact },
                        { label: 'Integrity', value: vuln.cvss.integrity_impact },
                        { label: 'Availability', value: vuln.cvss.availability_impact }
                    ];
                    
                    metrics.forEach(metric => {
                        if (metric.value) {
                            html += `<span class="cvss-metric"><span class="cvss-metric-label">${metric.label}:</span> ${metric.value}</span>`;
                        }
                    });
                    
                    html += '</div></div>';
                }
                
                // Dates
                if (vuln.published || vuln.updated) {
                    html += '<div class="detail-section">';
                    if (vuln.published) {
                        html += `<p><strong>Published:</strong> ${new Date(vuln.published).toLocaleDateString()}</p>`;
                    }
                    if (vuln.updated) {
                        html += `<p><strong>Last Updated:</strong> ${new Date(vuln.updated).toLocaleDateString()}</p>`;
                    }
                    html += '</div>';
                }
                
                // Exploit Information
                if (vuln.exploit_info) {
                    html += `
                        <div class="exploit-warning">
                            <h4>‚ö†Ô∏è Exploit Information</h4>
                            <p><strong>Exploit Available:</strong> ${vuln.exploit_info.exploit_available ? 'Yes' : 'No'}</p>
                            ${vuln.exploit_info.exploitability ? `<p><strong>Exploitability:</strong> ${vuln.exploit_info.exploitability}</p>` : ''}
                            ${vuln.exploit_info.exploit_type ? `<p><strong>Type:</strong> ${vuln.exploit_info.exploit_type}</p>` : ''}
                        </div>
                    `;
                }
                
                // Patches
                if (vuln.patches && vuln.patches.length > 0) {
                    html += '<div class="patch-info"><h4>‚úÖ Available Patches</h4>';
                    vuln.patches.forEach(patch => {
                        html += `<p>Version ${patch.version}`;
                        if (patch.release_date) {
                            html += ` (Released: ${new Date(patch.release_date).toLocaleDateString()})`;
                        }
                        if (patch.url) {
                            html += ` <a href="${patch.url}" target="_blank">Download</a>`;
                        }
                        html += '</p>';
                    });
                    html += '</div>';
                }
                
                // Fixed Versions
                if (vuln.fixed_versions && vuln.fixed_versions.length > 0) {
                    html += `<p><strong>Fixed in versions:</strong> ${vuln.fixed_versions.join(', ')}</p>`;
                }
                
                // Affected Versions
                if (vuln.affected_versions && vuln.affected_versions.length > 0) {
                    html += `<p><strong>Affected versions:</strong> ${vuln.affected_versions.join(', ')}</p>`;
                }
                
                // Advisories
                if (vuln.advisories && vuln.advisories.length > 0) {
                    html += '<div class="detail-section"><h4>Security Advisories</h4>';
                    vuln.advisories.forEach(advisory => {
                        html += `
                            <div class="advisory-card">
                                <strong>${advisory.source}</strong>: 
                                <a href="${advisory.url}" target="_blank">${advisory.title || advisory.url}</a>
                            </div>
                        `;
                    });
                    html += '</div>';
                }
                
                // References
                if (vuln.references && vuln.references.length > 0) {
                    html += '<div class="references-section"><h4>References</h4>';
                    vuln.references.forEach(ref => {
                        const source = ref.includes('nvd.nist.gov') ? 'NVD' : 
                                       ref.includes('github.com') ? 'GitHub' : 
                                       ref.includes('cve.mitre.org') ? 'MITRE' : 'Reference';
                        html += `<a href="${ref}" target="_blank" class="reference-link">${source}</a>`;
                    });
                    html += '</div>';
                }
                
                // CWE IDs
                if (vuln.cwe_ids && vuln.cwe_ids.length > 0) {
                    html += `<p><strong>CWE IDs:</strong> ${vuln.cwe_ids.join(', ')}</p>`;
                }
                
                // Aliases
                if (vuln.aliases && vuln.aliases.length > 0) {
                    html += `<p><strong>Also known as:</strong> ${vuln.aliases.join(', ')}</p>`;
                }
                
                html += '</div>';
                return html;
            }
            
            function createPaginationControls(apiResponse) {
                const total = apiResponse.total;
                const returned = apiResponse.returned;
                const limit = apiResponse.limit;
                const offset = apiResponse.offset;
                const hasMore = apiResponse.has_more;
                
                const totalPages = Math.ceil(total / pageSize);
                const hasPrevious = currentPage > 1;
                
                let html = `
                    <div class="pagination">
                        <button onclick="goToPage(1)" ${!hasPrevious ? 'disabled' : ''}>First</button>
                        <button onclick="goToPage(${currentPage - 1})" ${!hasPrevious ? 'disabled' : ''}>Previous</button>
                        <span class="page-info">Page ${currentPage} of ${totalPages}</span>
                        <button onclick="goToPage(${currentPage + 1})" ${!hasMore ? 'disabled' : ''}>Next</button>
                        <button onclick="goToPage(${totalPages})" ${!hasMore ? 'disabled' : ''}>Last</button>
                    </div>
                `;
                
                return html;
            }
            
            function goToPage(page) {
                currentPage = page;
                searchVulnerabilities();
            }
            
            function clearFilters() {
                document.getElementById('searchInput').value = '';
                document.getElementById('severityFilter').value = '';
                document.getElementById('analysisIdInput').value = '';
                currentPage = 1;
                document.getElementById('resultsContainer').innerHTML = '<div class="no-results">Enter search criteria above to find vulnerabilities</div>';
            }
            
            async function showOrphanVulnerabilities() {
                try {
                    const response = await fetch('/api/v1/vulnerabilities/orphans?limit=100');
                    const data = await response.json();
                    
                    if (data.vulnerabilities) {
                        displayVulnerabilities(data.vulnerabilities, null, null);
                        updateOrphanCount();
                    } else {
                        document.getElementById('resultsContainer').innerHTML = '<div class="no-results">No orphan vulnerabilities found</div>';
                    }
                } catch (error) {
                    console.error('Error fetching orphan vulnerabilities:', error);
                    document.getElementById('resultsContainer').innerHTML = '<div class="no-results">Error loading orphan vulnerabilities</div>';
                }
            }
            
            async function deleteOrphanVulnerabilities() {
                if (!confirm('Are you sure you want to delete ALL orphan vulnerabilities? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const response = await fetch('/api/v1/vulnerabilities/orphans', {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    
                    if (data.deleted_count !== undefined) {
                        alert(`Successfully deleted ${data.deleted_count} orphan vulnerabilities`);
                        // Refresh the current view
                        if (document.getElementById('resultsContainer').innerHTML.includes('Orphan Vulnerability')) {
                            showOrphanVulnerabilities();
                        }
                        updateOrphanCount();
                    } else {
                        alert('Failed to delete orphan vulnerabilities');
                    }
                } catch (error) {
                    console.error('Error deleting orphan vulnerabilities:', error);
                    alert('Error deleting orphan vulnerabilities');
                }
            }
            
            async function updateOrphanCount() {
                try {
                    const response = await fetch('/api/v1/vulnerabilities/orphans?limit=1');
                    const data = await response.json();
                    const count = data.orphan_count || 0;
                    
                    const countElement = document.getElementById('orphanCount');
                    if (count > 0) {
                        countElement.textContent = `(${count} orphan vulnerabilities found)`;
                        countElement.style.color = '#f39c12';
                    } else {
                        countElement.textContent = '(No orphan vulnerabilities)';
                        countElement.style.color = '#27ae60';
                    }
                } catch (error) {
                    console.error('Error fetching orphan count:', error);
                }
            }
            
            // Update orphan count on page load
            document.addEventListener('DOMContentLoaded', function() {
                updateOrphanCount();
            });
            
            // Allow searching by pressing Enter
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchVulnerabilities(true);
                }
            });
            
            document.getElementById('analysisIdInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchVulnerabilities(true);
                }
            });
        </script>
    </body>
    </html>
    """
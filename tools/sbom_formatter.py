#!/usr/bin/env python3
"""
SBOM Formatter - Converts SBOM JSON to human-readable format
"""

import json
import sys
from datetime import datetime
from collections import defaultdict

def format_sbom(json_file_path):
    """Format SBOM JSON file to human-readable output"""
    
    try:
        with open(json_file_path, 'r') as f:
            sbom_data = json.load(f)
    except FileNotFoundError:
        print(f"Error: File '{json_file_path}' not found.")
        return
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON in file '{json_file_path}'.")
        return
    
    # Extract basic document info
    doc_info = sbom_data.get('creationInfo', {})
    created_date = doc_info.get('created', 'Unknown')
    creators = doc_info.get('creators', [])
    
    # Parse creation date
    try:
        dt = datetime.fromisoformat(created_date.replace('Z', '+00:00'))
        formatted_date = dt.strftime('%B %d, %Y at %I:%M:%S %p UTC')
    except:
        formatted_date = created_date
    
    print("=" * 80)
    print("SOFTWARE BILL OF MATERIALS (SBOM)")
    print("=" * 80)
    print(f"Document Name: {sbom_data.get('name', 'Unknown')}")
    print(f"Generated: {formatted_date}")
    print(f"SPDX Version: {sbom_data.get('spdxVersion', 'Unknown')}")
    print(f"Data License: {sbom_data.get('dataLicense', 'Unknown')}")
    print(f"Generated by: {', '.join(creators) if creators else 'Unknown'}")
    print()
    
    # Process packages
    packages = sbom_data.get('packages', [])
    if not packages:
        print("No packages found in SBOM.")
        return
    
    print(f"Total Packages: {len(packages)}")
    print()
    
    # Group packages by type
    package_types = defaultdict(list)
    for pkg in packages:
        pkg_type = "Unknown"
        if 'externalRefs' in pkg:
            for ref in pkg['externalRefs']:
                if ref.get('referenceType') == 'purl':
                    purl = ref.get('referenceLocator', '')
                    if purl.startswith('pkg:deb/'):
                        pkg_type = "Debian Package"
                    elif purl.startswith('pkg:maven/'):
                        pkg_type = "Java/Maven Package"
                    elif purl.startswith('pkg:npm/'):
                        pkg_type = "Node.js Package"
                    elif purl.startswith('pkg:pypi/'):
                        pkg_type = "Python Package"
                    else:
                        pkg_type = "Other"
                    break
        package_types[pkg_type].append(pkg)
    
    # Display packages by type
    for pkg_type, pkgs in package_types.items():
        print(f"{pkg_type.upper()} ({len(pkgs)} packages)")
        print("-" * 60)
        
        # Sort packages by name
        pkgs.sort(key=lambda x: x.get('name', '').lower())
        
        for pkg in pkgs:
            name = pkg.get('name', 'Unknown')
            version = pkg.get('version', 'Unknown')
            license_info = pkg.get('licenseConcluded', 'Unknown')
            
            # Truncate long license strings
            if len(license_info) > 50:
                license_info = license_info[:47] + "..."
            
            print(f"  â€¢ {name} v{version}")
            print(f"    License: {license_info}")
            
            # Show PURL if available
            if 'externalRefs' in pkg:
                for ref in pkg['externalRefs']:
                    if ref.get('referenceType') == 'purl':
                        purl = ref.get('referenceLocator', '')
                        print(f"    PURL: {purl}")
                        break
        
        print()
    
    # Summary statistics
    print("SUMMARY STATISTICS")
    print("-" * 60)
    print(f"Total packages: {len(packages)}")
    for pkg_type, pkgs in package_types.items():
        print(f"{pkg_type}: {len(pkgs)} packages")
    
    # License analysis
    print("\nLICENSE ANALYSIS")
    print("-" * 60)
    license_counts = defaultdict(int)
    for pkg in packages:
        license_info = pkg.get('licenseConcluded', 'Unknown')
        if license_info != 'Unknown':
            # Extract first license from complex expressions
            if '(' in license_info and ')' in license_info:
                # Handle complex license expressions
                license_counts[license_info] += 1
            else:
                license_counts[license_info] += 1
        else:
            license_counts['Unknown'] += 1
    
    # Show top licenses
    sorted_licenses = sorted(license_counts.items(), key=lambda x: x[1], reverse=True)
    print("Most common licenses:")
    for license_name, count in sorted_licenses[:10]:
        percentage = (count / len(packages)) * 100
        print(f"  {license_name}: {count} packages ({percentage:.1f}%)")

def main():
    if len(sys.argv) != 2:
        print("Usage: python sbom_formatter.py <sbom_file.json>")
        print("Example: python sbom_formatter.py sbom-d6d6a1d4-8958-473f-8767-0b9abb7e5575.json")
        sys.exit(1)
    
    json_file = sys.argv[1]
    format_sbom(json_file)

if __name__ == "__main__":
    main() 
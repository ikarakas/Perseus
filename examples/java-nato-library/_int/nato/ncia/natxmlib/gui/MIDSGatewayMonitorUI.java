/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package _int.nato.ncia.natxmlib.gui;

import _int.nato.ncia.natxmlib.test.MIDSGateway;
import _int.nato.ncia.natxmlib.test.MIDSGateway.Component;
import _int.nato.ncia.natxmlib.test.MIDSGateway.State;
import static _int.nato.ncia.natxmlib.test.MIDSGateway.State.FAIL;
import static _int.nato.ncia.natxmlib.test.MIDSGateway.State.INI;
import static _int.nato.ncia.natxmlib.test.MIDSGateway.State.NOP;
import static _int.nato.ncia.natxmlib.test.MIDSGateway.State.OP;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.Timer;

/**
 *
 * @author mike
 */
public class MIDSGatewayMonitorUI extends javax.swing.JFrame {
    protected final MIDSGateway midsGateway;
    
    public MIDSGatewayMonitorUI(MIDSGateway midsGateway) {
        
        this.midsGateway=midsGateway;
        initComponents();
        updateUI();
        Timer t=new Timer(250, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateUI();
            }
        });
        t.setRepeats(true);
        t.start();
        
    }
    protected State getState(Component c) {
        return midsGateway.monitor.getState(c);
    }
    protected Icon getIcon(State s) {
        switch(s) {
            case FAIL:
                return StatusIcon.RED;
            case INI:
                return StatusIcon.YELLOW;
            case OP:
                return StatusIcon.GREEN;
            case NOP:
                return StatusIcon.LIGHT_GRAY;
            default:
                return StatusIcon.LIGHT_GRAY;
        }
    }
    protected Color getColor(State s) {
        switch(s) {
            case FAIL:
                return Color.RED;
            case INI:
                return Color.YELLOW;
            case OP:
                return Color.GREEN;
            case NOP:
                return Color.LIGHT_GRAY;
            default:
                return Color.LIGHT_GRAY;
        }
    }
    protected void updateLabel(JLabel lb, State state) {
        lb.setBackground(getColor(state));
        lb.setIcon(getIcon(state));
    }
    protected final void updateUI() {
//        updateLabel(lbAOCP_LINK, midsGateway.);
        updateLabel(lbMIDS_LINK, getState(Component.MIDS_LINK));
        updateLabel(lbMIDS_LOAD, getState(Component.MIDS_LOAD));
        updateLabel(lbMIDS_SYNC, getState(Component.MIDS_SYNC));
        updateLabel(lbMIDS_CRYPTO, getState(Component.MIDS_CRYPTO));

        updateLabel(lbAOCP_LINK, getState(Component.JIC));
        updateLabel(lbAOCP, getState(Component.MOCP));
        updateLabel(lbCPS, getState(Component.CPS));
        
        updateLabel(lbGINS_LINK, getState(Component.GINS_LINK));
        updateLabel(lbNAV, getState(Component.NAV));
        updateLabel(lbUTC, getState(Component.UTC));
        updateLabel(lbGPS, getState(Component.GPS));

        updateLabel(lbMIDS_NAV, getState(Component.MIDS_NAV));

        updateLabel(lbL16_TX, getState(Component.L16_TX));
        updateLabel(lbL16_RX, getState(Component.L16_RX));
        
        updateLabel(lbUTCTime,getState(Component.UTC_TIME));
        String utcTime=midsGateway.controller.getUTCTime();
        if(utcTime.length()>2) {
            tfUTCTime.setText(utcTime+" / "+midsGateway.controller.getUTCDate());
        }
        updateLabel(lbMIDSTime,getState(Component.MIDS_TIME));
        String midsTime=midsGateway.controller.getTerminalTime();
        if(midsTime.length()>2) {
            String midsDate=midsGateway.controller.getTerminalDate();
            String text=midsTime+((midsDate.length()>2)?" / "+midsDate:"");
            tfMIDSTime.setText(text);
        }
        btnUpdate.setEnabled(midsGateway.controller.checkCanSetTerminalTime());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnStatus = new javax.swing.JPanel();
        lbMIDS_LOAD = new javax.swing.JLabel();
        lbGINS_LINK = new javax.swing.JLabel();
        lbAOCP_LINK = new javax.swing.JLabel();
        lbMIDS_LINK = new javax.swing.JLabel();
        lbMIDS_NAV = new javax.swing.JLabel();
        lbL16_RX = new javax.swing.JLabel();
        lbMIDS_CRYPTO = new javax.swing.JLabel();
        lbL16_TX = new javax.swing.JLabel();
        lbUTC = new javax.swing.JLabel();
        lbNAV = new javax.swing.JLabel();
        lbGPS = new javax.swing.JLabel();
        lbAOCP = new javax.swing.JLabel();
        lbMIDS_SYNC = new javax.swing.JLabel();
        lbCPS = new javax.swing.JLabel();
        lbUTCTime = new javax.swing.JLabel();
        tfUTCTime = new javax.swing.JTextField();
        lbMIDSTime = new javax.swing.JLabel();
        tfMIDSTime = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NAEW MSEC / NATO Tactical Datalink Container (NTDLC) Gateway Application - Version 0.9");

        pnStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDS_LOAD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDS_LOAD.setText("MIDS LOAD");
        lbMIDS_LOAD.setToolTipText("Status of the MIDS Load");
        lbMIDS_LOAD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbGINS_LINK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbGINS_LINK.setText("GINS LINK");
        lbGINS_LINK.setToolTipText("Status of the connection to the GINS/1553");
        lbGINS_LINK.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbAOCP_LINK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAOCP_LINK.setText("JIC LINK");
        lbAOCP_LINK.setToolTipText("Status of the connection to the JIC");
        lbAOCP_LINK.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDS_LINK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDS_LINK.setIcon(StatusIcon.RED);
        lbMIDS_LINK.setText("MIDS LINK");
        lbMIDS_LINK.setToolTipText("Status of the connection to the MIDS LVT");
        lbMIDS_LINK.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDS_NAV.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDS_NAV.setText("MIDS NAV");
        lbMIDS_NAV.setToolTipText("MIDS NAV Data acquisititon status");
        lbMIDS_NAV.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbL16_RX.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbL16_RX.setText("L16 RX");
        lbL16_RX.setToolTipText("Status of the L16 RX over MIDS LVT");
        lbL16_RX.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDS_CRYPTO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDS_CRYPTO.setText("MIDS CRYPTO");
        lbMIDS_CRYPTO.setToolTipText("MIDS Crypto Status");
        lbMIDS_CRYPTO.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbL16_TX.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbL16_TX.setText("L16 TX");
        lbL16_TX.setToolTipText("Status of the L16 TX over MIDS LVT");
        lbL16_TX.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbUTC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbUTC.setText("UTC");
        lbUTC.setToolTipText("UTC Time acquisition status");
        lbUTC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbNAV.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbNAV.setText("NAV");
        lbNAV.setToolTipText("Status of the connection to the MIDS LVT");
        lbNAV.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbGPS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbGPS.setText("GPS");
        lbGPS.setToolTipText("Status of the connection to the GPS");
        lbGPS.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbAOCP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAOCP.setText("MOCP");
        lbAOCP.setToolTipText("Status of the connection to the MOCP");
        lbAOCP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDS_SYNC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDS_SYNC.setText("MIDS SYNC");
        lbMIDS_SYNC.setToolTipText("MIDS Synch Status");
        lbMIDS_SYNC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbCPS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCPS.setText("CPS");
        lbCPS.setToolTipText("Status of the connection to the CPS");
        lbCPS.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbUTCTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbUTCTime.setText("UTC TIME");
        lbUTCTime.setToolTipText("UTC Time");
        lbUTCTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tfUTCTime.setEditable(false);
        tfUTCTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbMIDSTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMIDSTime.setText("MIDS TIME");
        lbMIDSTime.setToolTipText("MIDS Time");
        lbMIDSTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tfMIDSTime.setEditable(false);
        tfMIDSTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnStatusLayout = new javax.swing.GroupLayout(pnStatus);
        pnStatus.setLayout(pnStatusLayout);
        pnStatusLayout.setHorizontalGroup(
            pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStatusLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnStatusLayout.createSequentialGroup()
                        .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnStatusLayout.createSequentialGroup()
                                .addComponent(lbMIDSTime, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnStatusLayout.createSequentialGroup()
                                .addComponent(lbUTCTime, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfUTCTime, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(tfMIDSTime))
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnStatusLayout.createSequentialGroup()
                        .addComponent(lbMIDS_NAV, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbL16_TX, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbL16_RX, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnStatusLayout.createSequentialGroup()
                        .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbMIDS_SYNC, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbMIDS_CRYPTO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbMIDS_LOAD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnStatusLayout.createSequentialGroup()
                                .addComponent(lbCPS, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbGPS, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnStatusLayout.createSequentialGroup()
                                .addComponent(lbAOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbUTC, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnStatusLayout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(lbNAV, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnStatusLayout.createSequentialGroup()
                        .addComponent(lbMIDS_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbAOCP_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbGINS_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        pnStatusLayout.setVerticalGroup(
            pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStatusLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMIDS_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbAOCP_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbGINS_LINK, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCPS, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbGPS, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMIDS_CRYPTO, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbAOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbUTC, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMIDS_LOAD, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMIDS_SYNC, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNAV, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMIDS_NAV, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbL16_TX, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbL16_RX, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfUTCTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbUTCTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(pnStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMIDSTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfMIDSTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(pnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(pnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        midsGateway.controller.doSetTerminalTime();
    }//GEN-LAST:event_btnUpdateActionPerformed

    /**
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MIDSGatewayGUI().setVisible(true);
            }
        });
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lbAOCP;
    private javax.swing.JLabel lbAOCP_LINK;
    private javax.swing.JLabel lbCPS;
    private javax.swing.JLabel lbGINS_LINK;
    private javax.swing.JLabel lbGPS;
    private javax.swing.JLabel lbL16_RX;
    private javax.swing.JLabel lbL16_TX;
    private javax.swing.JLabel lbMIDSTime;
    private javax.swing.JLabel lbMIDS_CRYPTO;
    private javax.swing.JLabel lbMIDS_LINK;
    private javax.swing.JLabel lbMIDS_LOAD;
    private javax.swing.JLabel lbMIDS_NAV;
    private javax.swing.JLabel lbMIDS_SYNC;
    private javax.swing.JLabel lbNAV;
    private javax.swing.JLabel lbUTC;
    private javax.swing.JLabel lbUTCTime;
    private javax.swing.JPanel pnStatus;
    private javax.swing.JTextField tfMIDSTime;
    private javax.swing.JTextField tfUTCTime;
    // End of variables declaration//GEN-END:variables
}
